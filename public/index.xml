<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wordbit</title>
    <link>http://wordbit.com/</link>
    <description>Recent content on wordbit</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 25 Oct 2015 12:57:24 +0000</lastBuildDate>
    <atom:link href="http://wordbit.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>wordbit is experiencing some technical difficulties</title>
      <link>http://wordbit.com/posts/technical-difficulties/</link>
      <pubDate>Sun, 25 Oct 2015 12:57:24 +0000</pubDate>
      
      <guid>http://wordbit.com/posts/technical-difficulties/</guid>
      <description>&lt;p&gt;Hello there. I&amp;rsquo;m experiencing some technical difficulties. All will be revealed soon.&lt;/p&gt;

&lt;p&gt;In the meantime, you can visit &lt;a href=&#34;http://wordbitlog.wordpress.com/&#34;&gt;a clone of my blog here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;New posts will be forthcoming as soon as I sort things out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Apps with Riot, ES6 and Webpack</title>
      <link>http://wordbit.com/posts/riot-es6-webpack-apps/</link>
      <pubDate>Tue, 10 Feb 2015 10:49:00 +1300</pubDate>
      
      <guid>http://wordbit.com/posts/riot-es6-webpack-apps/</guid>
      <description>

&lt;p&gt;I arrived at &lt;a href=&#34;https://muut.com/riotjs/&#34;&gt;Riot&lt;/a&gt;  after reading the Muut &lt;a href=&#34;https://muut.com/blog/technology/frameworkless-javascript.html&#34;&gt;Frameworkless JavaScript&lt;/a&gt; blog post &amp;ndash; read this first!  The Muut programmers have put their money where their mouths are and built Riot, a minimalist &lt;a href=&#34;https://muut.com/blog/technology/riot-2.0/&#34;&gt;Reactjs-like library&lt;/a&gt; called &lt;a href=&#34;https://muut.com/riotjs/&#34;&gt;Riot&lt;/a&gt; for building reactive UI components.&lt;/p&gt;

&lt;p&gt;Reading the Riot documentation the thing that struck me was how easy Riot is to understand &amp;ndash; there are very few new terms and concepts to learn compared to React (which, to be fair, is also straight-forward compared to e.g. Polymer and Angular).&lt;/p&gt;

&lt;p&gt;To help me learn Riot I ported my React &lt;a href=&#34;https://github.com/srackham/flux-backbone-todo&#34;&gt;Flux Backbone Todos Example&lt;/a&gt; to a &lt;a href=&#34;https://github.com/srackham/riot-todo&#34;&gt;Riot Todo app&lt;/a&gt;. This post is a compilation of notes I made documenting the experience.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn%27t_read&#34;&gt;tl;dr&lt;/a&gt; answers are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Riot really does live up to its minimalist motto. The (unminified) Riot version of the Todo weighs in at a tiny 32KB compared to 964KB for the React version (600KB after subtracting Backbone and JQuery which are not used in the Riot version). However you look at it that&amp;rsquo;s a huge difference.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Riot has that rare Goldilocks &amp;ldquo;just right&amp;rdquo; feel about it and is a joy to use.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Riot is a relatively new project, I was unable to find statistics on how it scales performance-wise in larger projects. How it fares alongside the Rect juggernaut is an open question &amp;ndash; I hope it does well.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you&amp;rsquo;re not familiar with Riot take a look at the &lt;a href=&#34;https://muut.com/riotjs/&#34;&gt;Riot website&lt;/a&gt; &amp;ndash; the documentation is first class. So rather than discussing how Riot works I&amp;rsquo;ll just list things I&amp;rsquo;ve learnt that may not be obvious reading the documentation.&lt;/p&gt;

&lt;h2 id=&#34;using-es6-with-riot:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;Using ES6 with Riot&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/srackham/riot-todo&#34;&gt;example app&lt;/a&gt; is written in ES6, I use the &lt;a href=&#34;http://6to5.org/&#34;&gt;6to5&lt;/a&gt; transpiler to convert it to ES5 and &lt;a href=&#34;http://webpack.github.io/&#34;&gt;Webpack&lt;/a&gt; to bundle the compiled code along with required libraries. This approach necessitates combining JavaScript modules &amp;ndash; working in ES6 is particularly nice as you get to take advantage of the new ES6 import and export statements (see &lt;a href=&#34;https://github.com/srackham/riot-todo/blob/master/src/index.js&#34;&gt;this example&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Webpack &lt;a href=&#34;https://github.com/srackham/riot-todo/blob/master/webpack.config.js&#34;&gt;is configured&lt;/a&gt; to use the &lt;code&gt;6to5-loader&lt;/code&gt; which automatically converts ES6 source to CommonJS formatted ES5 modules that are then bundled into the single &lt;code&gt;bundle.js&lt;/code&gt; distributable file.&lt;/p&gt;

&lt;h2 id=&#34;why-i-don-t-use-riot-tag-files:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;Why I don&amp;rsquo;t use Riot .tag files&lt;/h2&gt;

&lt;p&gt;Riot tag files are HTML templates containing HTML markup along with JavaScript UI logic.
If you&amp;rsquo;ve looked at the &lt;a href=&#34;https://github.com/srackham/riot-todo&#34;&gt;Todo app&lt;/a&gt; app you are probably wondering where the tag files are &amp;ndash; the answer is that I no longer use them, preferring JavaScript instead. By eliminating &lt;code&gt;.tag&lt;/code&gt; files I&amp;rsquo;ve simplified my coding, tooling and workflow. For me, tag file complexity and limitations outweigh any perceived benefits.&lt;/p&gt;

&lt;p&gt;This is not a criticism of Riot, the neat thing about tag files is that they&amp;rsquo;re entirely optional and I&amp;rsquo;m documenting why I don&amp;rsquo;t use them.&lt;/p&gt;

&lt;p&gt;When you examine the compiled JavaScript you see that Riot tag files are a thin layer of syntactic sugar.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;They add an additional conceptual layer &amp;ndash; new(ish) syntax and semantics have to be learned.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;They add an additional compilation step.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The tag file compiler dictates the languages and templates you can use (CoffeeScript, ES6, Jade) contradicting the &amp;ldquo;Use your favorite tools&amp;rdquo; mantra.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The tag constructor-body logic is out of context:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is not amenable to editor/IDE linting and other tooling.&lt;/li&gt;
&lt;li&gt;Referencing &lt;code&gt;this&lt;/code&gt; out of context means the code is not legal JavaScript and generates errors in editors/IDEs.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There is currently no support for module formats (CommonJS, AMD) &amp;ndash; tag files compile to plain JavaScript .&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tag files require tag loaders to be used directly in build tools such as Webpack and Browserify.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &amp;ldquo;ES6-like&amp;rdquo; constructor methods are nice but they are not legal JavaScript and are likely to always be a source of ongoing confusion (syntax and semantics). You can use &lt;em&gt;ES6 arrow functions&lt;/em&gt; to achieve the same semantics (lexically bound &lt;code&gt;this&lt;/code&gt;) with almost the same brevity, for example:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;this.add = (e) =&amp;gt; {
  var input = e.target[0]
  this.items.push(input.value)
  input.value = &#39;&#39;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;https://github.com/srackham/riot-todo/blob/0.1.1/src/tags.js&#34;&gt;an example of an ES6 JavaScript tags file&lt;/a&gt; using ES6 template strings and arrow functions.&lt;/p&gt;

&lt;p&gt;ES6 Template Strings aid the readability of tag HTML templates. Similarly, if you are using CoffeeScript you can use CoffeeScript Block Strings. &lt;a href=&#34;http://facebook.github.io/jsx/&#34;&gt;JSX&lt;/a&gt; is another possibility &amp;ndash; React&amp;rsquo;s JSX transformer could be modified to emit a string literal and you could then take advantage of existing JSX tooling support.&lt;/p&gt;

&lt;h2 id=&#34;the-fundamental-difference-between-riot-and-react:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;The fundamental difference between Riot and React&lt;/h2&gt;

&lt;p&gt;The most significant difference lies in how the UI markup templates are declared:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In React the UI template markup is baked in your JavaScript source (using the JSX language extension).&lt;/li&gt;
&lt;li&gt;Riot inverts the React model by putting the markup and logic in an HTML (tag) file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The upshot of this inversion is that the React template DSL language is JavaScript whereas Riot relies on a custom template DSL (implemented with custom tags). Here are two simplified examples that generate a list from an array of todo items: the first is React JavaScript the second is the equivalent Riot tag markup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  todos.map(todo =&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;TodoItemComponent todo={todo} /&amp;gt;&amp;lt;/li&amp;gt;)
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li each=&amp;quot;{todo in todos}&amp;quot;&amp;gt;
    &amp;lt;todo-item todo=&amp;quot;{todo}&amp;quot;&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first example uses JavaScript&amp;rsquo;s &lt;code&gt;map&lt;/code&gt; function to generate a list of &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements; the second uses Riot&amp;rsquo;s custom &lt;code&gt;each&lt;/code&gt; template attribute.&lt;/p&gt;

&lt;p&gt;Steve Luscher explains why he thinks JavaScript is better than custom template DSLs &lt;a href=&#34;https://www.youtube.com/watch?v=rI0GQc__0SM#t=1325&#34;&gt;towards the end of this video&lt;/a&gt; &amp;ndash; not only do you have to learn a custom DSL you are also constrained by the features the DSL offers. For small common use-case examples like ones above there is little to choose between the two approaches, but when it comes to larger highly dynamic UI compositions the power and flexibility of React&amp;rsquo;s JavaScript approach is clearly superior.&lt;/p&gt;

&lt;h2 id=&#34;tips:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;Tips&lt;/h2&gt;

&lt;h3 id=&#34;avoid-self-closing-xhtml-style-tags:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;Avoid self-closing XHTML style tags&lt;/h3&gt;

&lt;p&gt;Do not close tags with &lt;code&gt;/&amp;gt;&lt;/code&gt; as it does not always immediately close the tag.  When dealing with HTML5 elements &lt;code&gt;&amp;lt;foo /&amp;gt;&lt;/code&gt; means &lt;code&gt;&amp;lt;foo&amp;gt;&lt;/code&gt; (whereas in XHTML &lt;code&gt;&amp;lt;foo /&amp;gt;&lt;/code&gt; means &lt;code&gt;&amp;lt;foo&amp;gt;&amp;lt;/foo&amp;gt;&lt;/code&gt;) i.e. HTML5 ignores the &lt;code&gt;/&lt;/code&gt; character. See this &lt;a href=&#34;http://stackoverflow.com/a/9845124/1136455&#34;&gt;Stackoverflow post&lt;/a&gt; on the subject. See also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://muut.com/riotjs/forum/#!/using:closing-html5-tags-with-&#34;&gt;Closing HTML5 tags with /&amp;gt; can produce unexpected results&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://muut.com/riotjs/forum/#!/using:misplaced-form-end-tag&#34;&gt;Misplaced form end-tags&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bind-tag-event-handlers-to-this:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;Bind tag event handlers to this&lt;/h3&gt;

&lt;p&gt;Bind tag event handlers to &lt;code&gt;this&lt;/code&gt; to ensure they are always fired with the tag context (alternatively use the &lt;code&gt;var self = this&lt;/code&gt; idiom). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.clear = function(e) {
  dispatcher.trigger(dispatcher.CLEAR_TODOS);
}.bind(this);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ES6 you can achieve the same thing with lexically bound ES6 &lt;em&gt;arrow functions&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.clear = (e) =&amp;gt; {
  dispatcher.trigger(dispatcher.CLEAR_TODOS);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;referencing-loop-items:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;Referencing Loop items&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;each=&amp;quot;{item in items}&amp;quot;&lt;/code&gt; construct to pass the current looped item to a child custom tag. In the following example the code in the custom &lt;code&gt;todo-item&lt;/code&gt; tag can refer to the current todo item with &lt;code&gt;opts.todo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
 &amp;lt;li each=&amp;quot;{todo in opts.store.todos}&amp;quot;&amp;gt;
   &amp;lt;todo-item store=&amp;quot;{parent.opts.store}&amp;quot; todo=&amp;quot;{todo}&amp;quot;&amp;gt;
 &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;namespace-event-names:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;Namespace event names&lt;/h3&gt;

&lt;p&gt;Use the colon namespacing convention to group application event names e.g. &lt;code&gt;admin:edit&lt;/code&gt;, &lt;code&gt;admin:delete&lt;/code&gt;, &lt;code&gt;admin:new&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;you-can-use-custom-tag-names-in-css-files:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;You can use custom tag names in CSS files&lt;/h3&gt;

&lt;p&gt;Custom tags are rendered into the DOM and so they can be used for CSS selection and DOM interrogation, here&amp;rsquo;s &lt;a href=&#34;https://github.com/srackham/riot-todo/blob/master/dist/index.css&#34;&gt;an example&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;debugging:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;When bundling with Webpack you need to use the &lt;a href=&#34;https://github.com/srackham/riot-todo/blob/master/webpack.config.js&#34;&gt;devtool source-map configuration option&lt;/a&gt; to produce a &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&#34;&gt;source map&lt;/a&gt; file for you bundled app. This allows you to debug from the ES6 source code files.&lt;/p&gt;

&lt;p&gt;To browse and debug the source code open your browser&amp;rsquo;s &lt;em&gt;Sources window&lt;/em&gt; and navigate to the folder &lt;code&gt;webpack:///.&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Firefox: open the Debugger (Ctrl+Shift+S).&lt;/li&gt;
&lt;li&gt;In Google Chrome: open the Console (Ctrl+Shift+J) then click on the &lt;em&gt;Sources&lt;/em&gt; tab to view the Sources panel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m not big on debuggers and break points &amp;ndash; most of the time I just put strategically placed temporary &lt;code&gt;console.log()&lt;/code&gt; statements in the code.&lt;/p&gt;

&lt;h2 id=&#34;the-big-picture:b2eb1aea6ec0dfb6c22bb643e9bdf105&#34;&gt;The Big Picture&lt;/h2&gt;

&lt;p&gt;Riot (like React) is a UI library, not a framework. This is good (I prefer a small set of focused libraries to an all encompassing framework) but non-trivial applications need a coherent high-level structure (an architecture) to ease scalability, evolution and maintainability. &lt;a href=&#34;https://www.npmjs.com/package/flux&#34;&gt;Flux&lt;/a&gt; is increasing the architecture of choice for React-like apps. I like Flux because it&amp;rsquo;s easy to understand and because it makes intuitive sense (not out of any theoretical conviction). The &lt;a href=&#34;https://github.com/srackham/riot-todo&#34;&gt;Riot Todo app&lt;/a&gt; uses the &lt;a href=&#34;https://github.com/jimsparkman/RiotControl&#34;&gt;RiotControl&lt;/a&gt; flux-style dispatcher (slightly modified) to implement the Flux architecture.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://wordbit.com/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wordbit.com/pages/about/</guid>
      <description>

&lt;h1 id=&#34;antoine-giraud-s-blog:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Antoine Giraud&amp;rsquo;s Blog&lt;/h1&gt;

&lt;p&gt;Greetings netizen – thanks for stopping by. My name is Antoine and this is my personal blog. I’ve been blogging online since 2003 and am a writer by trade. Here you’ll find longform posts covering a variety of topics that interest me. This blog is pretty simple and you won’t find anything except pure unadulterated content here; however, you’re welcome to talk to me about anything I’ve written about on &lt;a href=&#34;https://twitter.com/wordbit&#34;&gt;Twitter&lt;/a&gt;. In case you were wondering, I try to post at least once a month. Thanks again for reading and welcome to my home on the Internet.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>